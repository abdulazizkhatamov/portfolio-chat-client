/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as AppRouteImport } from './routes/_app'
import { Route as AuthRegisterRouteImport } from './routes/_auth/register'
import { Route as AuthLoginRouteImport } from './routes/_auth/login'
import { Route as AppLayoutRouteImport } from './routes/_app/_layout'
import { Route as AppLayoutIndexRouteImport } from './routes/_app/_layout.index'
import { Route as AppLayoutGroupsRouteImport } from './routes/_app/_layout.groups'
import { Route as AppLayoutContactsRouteImport } from './routes/_app/_layout.contacts'

const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const AppRoute = AppRouteImport.update({
  id: '/_app',
  getParentRoute: () => rootRouteImport,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)
const AppLayoutRoute = AppLayoutRouteImport.update({
  id: '/_layout',
  getParentRoute: () => AppRoute,
} as any)
const AppLayoutIndexRoute = AppLayoutIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => AppLayoutRoute,
} as any)
const AppLayoutGroupsRoute = AppLayoutGroupsRouteImport.update({
  id: '/groups',
  path: '/groups',
  getParentRoute: () => AppLayoutRoute,
} as any)
const AppLayoutContactsRoute = AppLayoutContactsRouteImport.update({
  id: '/contacts',
  path: '/contacts',
  getParentRoute: () => AppLayoutRoute,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/contacts': typeof AppLayoutContactsRoute
  '/groups': typeof AppLayoutGroupsRoute
  '/': typeof AppLayoutIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/contacts': typeof AppLayoutContactsRoute
  '/groups': typeof AppLayoutGroupsRoute
  '/': typeof AppLayoutIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_app': typeof AppRouteWithChildren
  '/_auth': typeof AuthRouteWithChildren
  '/_app/_layout': typeof AppLayoutRouteWithChildren
  '/_auth/login': typeof AuthLoginRoute
  '/_auth/register': typeof AuthRegisterRoute
  '/_app/_layout/contacts': typeof AppLayoutContactsRoute
  '/_app/_layout/groups': typeof AppLayoutGroupsRoute
  '/_app/_layout/': typeof AppLayoutIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/login' | '/register' | '/contacts' | '/groups' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/register' | '/contacts' | '/groups' | '/'
  id:
    | '__root__'
    | '/_app'
    | '/_auth'
    | '/_app/_layout'
    | '/_auth/login'
    | '/_auth/register'
    | '/_app/_layout/contacts'
    | '/_app/_layout/groups'
    | '/_app/_layout/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  AppRoute: typeof AppRouteWithChildren
  AuthRoute: typeof AuthRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_app': {
      id: '/_app'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_auth/register': {
      id: '/_auth/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_app/_layout': {
      id: '/_app/_layout'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AppLayoutRouteImport
      parentRoute: typeof AppRoute
    }
    '/_app/_layout/': {
      id: '/_app/_layout/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof AppLayoutIndexRouteImport
      parentRoute: typeof AppLayoutRoute
    }
    '/_app/_layout/groups': {
      id: '/_app/_layout/groups'
      path: '/groups'
      fullPath: '/groups'
      preLoaderRoute: typeof AppLayoutGroupsRouteImport
      parentRoute: typeof AppLayoutRoute
    }
    '/_app/_layout/contacts': {
      id: '/_app/_layout/contacts'
      path: '/contacts'
      fullPath: '/contacts'
      preLoaderRoute: typeof AppLayoutContactsRouteImport
      parentRoute: typeof AppLayoutRoute
    }
  }
}

interface AppLayoutRouteChildren {
  AppLayoutContactsRoute: typeof AppLayoutContactsRoute
  AppLayoutGroupsRoute: typeof AppLayoutGroupsRoute
  AppLayoutIndexRoute: typeof AppLayoutIndexRoute
}

const AppLayoutRouteChildren: AppLayoutRouteChildren = {
  AppLayoutContactsRoute: AppLayoutContactsRoute,
  AppLayoutGroupsRoute: AppLayoutGroupsRoute,
  AppLayoutIndexRoute: AppLayoutIndexRoute,
}

const AppLayoutRouteWithChildren = AppLayoutRoute._addFileChildren(
  AppLayoutRouteChildren,
)

interface AppRouteChildren {
  AppLayoutRoute: typeof AppLayoutRouteWithChildren
}

const AppRouteChildren: AppRouteChildren = {
  AppLayoutRoute: AppLayoutRouteWithChildren,
}

const AppRouteWithChildren = AppRoute._addFileChildren(AppRouteChildren)

interface AuthRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  AppRoute: AppRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
