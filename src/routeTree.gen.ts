/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as AuthRouteImport } from './routes/_auth'
import { Route as ChatRouteRouteImport } from './routes/_chat/route'
import { Route as ChatIndexRouteImport } from './routes/_chat/index'
import { Route as ChatGroupsRouteImport } from './routes/_chat/groups'
import { Route as ChatContactsRouteImport } from './routes/_chat/contacts'
import { Route as AuthRegisterRouteImport } from './routes/_auth/register'
import { Route as AuthLoginRouteImport } from './routes/_auth/login'

const AuthRoute = AuthRouteImport.update({
  id: '/_auth',
  getParentRoute: () => rootRouteImport,
} as any)
const ChatRouteRoute = ChatRouteRouteImport.update({
  id: '/_chat',
  getParentRoute: () => rootRouteImport,
} as any)
const ChatIndexRoute = ChatIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => ChatRouteRoute,
} as any)
const ChatGroupsRoute = ChatGroupsRouteImport.update({
  id: '/groups',
  path: '/groups',
  getParentRoute: () => ChatRouteRoute,
} as any)
const ChatContactsRoute = ChatContactsRouteImport.update({
  id: '/contacts',
  path: '/contacts',
  getParentRoute: () => ChatRouteRoute,
} as any)
const AuthRegisterRoute = AuthRegisterRouteImport.update({
  id: '/register',
  path: '/register',
  getParentRoute: () => AuthRoute,
} as any)
const AuthLoginRoute = AuthLoginRouteImport.update({
  id: '/login',
  path: '/login',
  getParentRoute: () => AuthRoute,
} as any)

export interface FileRoutesByFullPath {
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/contacts': typeof ChatContactsRoute
  '/groups': typeof ChatGroupsRoute
  '/': typeof ChatIndexRoute
}
export interface FileRoutesByTo {
  '/login': typeof AuthLoginRoute
  '/register': typeof AuthRegisterRoute
  '/contacts': typeof ChatContactsRoute
  '/groups': typeof ChatGroupsRoute
  '/': typeof ChatIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/_chat': typeof ChatRouteRouteWithChildren
  '/_auth': typeof AuthRouteWithChildren
  '/_auth/login': typeof AuthLoginRoute
  '/_auth/register': typeof AuthRegisterRoute
  '/_chat/contacts': typeof ChatContactsRoute
  '/_chat/groups': typeof ChatGroupsRoute
  '/_chat/': typeof ChatIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/login' | '/register' | '/contacts' | '/groups' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/login' | '/register' | '/contacts' | '/groups' | '/'
  id:
    | '__root__'
    | '/_chat'
    | '/_auth'
    | '/_auth/login'
    | '/_auth/register'
    | '/_chat/contacts'
    | '/_chat/groups'
    | '/_chat/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  ChatRouteRoute: typeof ChatRouteRouteWithChildren
  AuthRoute: typeof AuthRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_auth': {
      id: '/_auth'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof AuthRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_chat': {
      id: '/_chat'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ChatRouteRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/_chat/': {
      id: '/_chat/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ChatIndexRouteImport
      parentRoute: typeof ChatRouteRoute
    }
    '/_chat/groups': {
      id: '/_chat/groups'
      path: '/groups'
      fullPath: '/groups'
      preLoaderRoute: typeof ChatGroupsRouteImport
      parentRoute: typeof ChatRouteRoute
    }
    '/_chat/contacts': {
      id: '/_chat/contacts'
      path: '/contacts'
      fullPath: '/contacts'
      preLoaderRoute: typeof ChatContactsRouteImport
      parentRoute: typeof ChatRouteRoute
    }
    '/_auth/register': {
      id: '/_auth/register'
      path: '/register'
      fullPath: '/register'
      preLoaderRoute: typeof AuthRegisterRouteImport
      parentRoute: typeof AuthRoute
    }
    '/_auth/login': {
      id: '/_auth/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof AuthLoginRouteImport
      parentRoute: typeof AuthRoute
    }
  }
}

interface ChatRouteRouteChildren {
  ChatContactsRoute: typeof ChatContactsRoute
  ChatGroupsRoute: typeof ChatGroupsRoute
  ChatIndexRoute: typeof ChatIndexRoute
}

const ChatRouteRouteChildren: ChatRouteRouteChildren = {
  ChatContactsRoute: ChatContactsRoute,
  ChatGroupsRoute: ChatGroupsRoute,
  ChatIndexRoute: ChatIndexRoute,
}

const ChatRouteRouteWithChildren = ChatRouteRoute._addFileChildren(
  ChatRouteRouteChildren,
)

interface AuthRouteChildren {
  AuthLoginRoute: typeof AuthLoginRoute
  AuthRegisterRoute: typeof AuthRegisterRoute
}

const AuthRouteChildren: AuthRouteChildren = {
  AuthLoginRoute: AuthLoginRoute,
  AuthRegisterRoute: AuthRegisterRoute,
}

const AuthRouteWithChildren = AuthRoute._addFileChildren(AuthRouteChildren)

const rootRouteChildren: RootRouteChildren = {
  ChatRouteRoute: ChatRouteRouteWithChildren,
  AuthRoute: AuthRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
